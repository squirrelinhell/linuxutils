#!/bin/bash

INFO='
An ALSA plugin for better stereo sound with headphones.

Usage:
        phase-shift-alsa [ ... options ... ]

Options:
        -b                Build the LADSPA plugin
        -i                Build and install to /usr/lib/ladspa
        -a                Write configuration to ~/.asoundrc
        -p                Autoload pulse module
'

SRC='
#include <stdlib.h>
#include <ladspa.h>

typedef struct {
    int enabled;
    float * ports[4];
    float bufferl[256];
    float bufferr[256];
    int bufferlen, bufferpos;
} phase_shift_d;

static LADSPA_Handle instantiate(const LADSPA_Descriptor * d, unsigned long rate) {
    phase_shift_d * h = malloc(sizeof(phase_shift_d));
    int i;
    h->bufferlen = 0.0002*rate;
    h->enabled = (h->bufferlen >= 2) && (h->bufferlen <= 256);
    if (h->enabled) {
        h->bufferpos = 0;
        for (i = 0; i < h->bufferlen; i++) {
            h->bufferl[i] = 0;
            h->bufferr[i] = 0;
        }
    }
    return (LADSPA_Handle)h;
}

static void connect_port(const LADSPA_Handle handle, unsigned long num, float * port) {
    phase_shift_d * h = (phase_shift_d *)handle;
    h->ports[num] = port;
}

static void run(LADSPA_Handle handle, unsigned long samples) {
    phase_shift_d * h = (phase_shift_d *)handle;
    unsigned long s;
    if (!h->enabled) {
        for (s = 0; s < samples; s++) {
            h->ports[2][s] = h->ports[0][s];
            h->ports[3][s] = h->ports[1][s];
        }
        return;
    }
    for (s = 0; s < samples; s++) {
        // Process a sample from left channel
        h->ports[2][s] = (h->ports[0][s]+h->bufferl[h->bufferpos])/2;
        // Process a sample from right channel
        h->ports[3][s] = (h->ports[1][s]+h->bufferr[h->bufferpos])/2;
        // Save current values for phase shifted mixing later
        h->bufferl[h->bufferpos] = h->ports[1][s];
        h->bufferr[h->bufferpos] = h->ports[0][s];
        h->bufferpos++;
        h->bufferpos = h->bufferpos%h->bufferlen;
    }
}

static void cleanup(LADSPA_Handle h) {
    free(h);
}

static const char * c_port_names[4] = {
    "Input - Left Channel",
    "Input - Right Channel",
    "Output - Left Channel",
    "Output - Right Channel"
};

static LADSPA_PortDescriptor c_port_descriptors[4] = {
    LADSPA_PORT_AUDIO | LADSPA_PORT_INPUT,
    LADSPA_PORT_AUDIO | LADSPA_PORT_INPUT,
    LADSPA_PORT_AUDIO | LADSPA_PORT_OUTPUT,
    LADSPA_PORT_AUDIO | LADSPA_PORT_OUTPUT
};

static LADSPA_Descriptor c_ladspa_descriptor = {
    .UniqueID = 0x22b3e5,
    .Label = "phase_shift",
    .Name = "Phase Shift For Headphones",
    .Maker = "Unknown",
    .Copyright = "Unknown",
    .PortCount = 4,
    .PortDescriptors = c_port_descriptors,
    .PortNames = c_port_names,
    .instantiate = instantiate,
    .connect_port = connect_port,
    .run = run,
    .cleanup = cleanup
};

const LADSPA_Descriptor * ladspa_descriptor(unsigned long i) {
    if (i == 0) return &c_ladspa_descriptor;
    return 0;
}
'

ASOUNDRC='
pcm.phase_shift {
    type ladspa
    slave.pcm "plug:dmix"
    path /usr/lib/ladspa
    plugins [
        {
            label phase_shift
        }
    ]
}

pcm.!default {
    type asym
    playback.pcm {
        type plug
        slave.pcm "phase_shift"
    }
    capture.pcm {
        type plug
        slave.pcm "dsnoop"
    }

}
'

BUILD=n
INSTALL=n
ALSA=n
PULSE=n

while getopts "biap" opt; do
    case "$opt" in
        b) BUILD=y ;;
        i) INSTALL=y ;;
        a) ALSA=y ;;
        p) PULSE=y ;;
        *) echo "$INFO" 1>&2; exit 1 ;;
    esac
done
shift $(($OPTIND - 1))

if [ "x$1" != x -o "$BUILD$INSTALL$ALSA$PULSE" = nnnn ]; then
    echo "$INFO" 1>&2
    exit 1
fi

TMPDIR=$(mktemp -d) || exit 1
trap "rm -rf $TMPDIR" EXIT

if [ "$BUILD" = y -o "$INSTALL" = y ]; then
    gcc -x c <(echo "$SRC") \
        -fPIC -O2 -Wall -shared -o "$TMPDIR/phase_shift.so" || exit 1
fi

if [ "$BUILD" = y ]; then
    cp "$TMPDIR/phase_shift.so" . || exit 1
fi

if [ "$INSTALL" = y ]; then
    sudo cp "$TMPDIR/phase_shift.so" /usr/lib/ladspa || exit 1
fi

if [ "$ALSA" = y -o "$PULSE" = y ]; then
    if [ ! -e "/usr/lib/ladspa/phase_shift.so" ]; then
        echo "Warning: /usr/lib/ladspa/phase_shift.so does not exist" 1>&2
    fi
fi

if [ "$ALSA" = y ]; then
    echo "$ASOUNDRC" > ~/.asoundrc || exit 1
fi

if [ "$PULSE" = y ]; then
    SINKS=$(pacmd list-sinks) || exit 1
    if echo "$SINKS" | grep phase_shift >/dev/null; then
        pacmd unload-module module-ladspa-sink
        SINKS=$(pacmd list-sinks) || exit 1
    fi
    if echo "$SINKS" | grep phase_shift >/dev/null; then
        echo "Error: phase_shift is already loaded in PulseAudio" 1>&2
        exit 1
    fi
    DEFSINK=$(echo "$SINKS" | \
        sed -n -r -e '/^\s*\*/{n;s/^.*<(.*)>.*$/\1/g;p;}') || exit 1
    pacmd load-module \
        module-ladspa-sink \
        sink_name=phase_shift \
        master="$DEFSINK" \
        plugin=phase_shift \
        label=phase_shift || exit 1
    SINKS=$(pacmd list-sinks) || exit 1
    if ! echo "$SINKS" | grep phase_shift >/dev/null; then
        exit 1
    fi
    pacmd set-default-sink phase_shift
fi

exit 0
