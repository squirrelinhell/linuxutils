#!/bin/bash

INFO="
Resize a large image to 1/2 size while using a small amount of memory.

Usage:

    resize2half <input image> <output.ppm>
"

TMPDIR=$(mktemp -d) || exit 1
trap "rm -rf $TMPDIR" EXIT

INFILE="$1"
OUTFILE="$2"

GCC_OPTS="-Wall -O3 -march=native -fomit-frame-pointer"

if [ "x$INFILE" = x -o ! -f "$INFILE" -o "x$OUTFILE" = x ]; then
    echo "$INFO" 1>&2
    exit 1
fi

INFO=$(identify -ping "$INFILE" 2>/dev/null) || exit 1

SIZE=$(echo "$INFO" | tr ' ' '\n' | tail -n 7 | head -n 1)
WIDTH=${SIZE%%x*}
HEIGHT=${SIZE##*x}

cat > $TMPDIR/resample.c << EOF
#include "stdio.h"
#include "stdlib.h"
unsigned char fmtc(int v) {
    v >>= 2;
    if (v < 0) return 0;
    if (v > 255) return 255;
    return v;
}
int main(int argc, char ** argv) {
    int w = atoi(argv[1]);
    int h = atoi(argv[2]);
    if ((w < 2) || (h < 2)) {
        fprintf(stderr, "Invalid image dimensions\n");
        return 1;
    }
    fprintf(stderr, "Resize %dx%d to %dx%d\n", w, h, w >> 1, h >> 1);
    int * row = malloc(w*3*sizeof(int));
    if (row == 0) {
        fprintf(stderr, "Could not allocate memory\n");
        return 1;
    }
    printf("P6 %d %d 255\n", w >> 1, h >> 1);
    int x, y, t;
    for (y = 0; y < (h >> 1); ++y) {
        for (x = 0; x < w; ++x) {
            row[(x*3)] = row[(x*3)+1] = row[(x*3)+2] = 0;
        }
        for (t = 0; t < 2; ++t) {
            for (x = 0; x < w; ++x) {
                row[((x>>1)*3)] += getchar();
                row[((x>>1)*3)+1] += getchar();
                row[((x>>1)*3)+2] += getchar();
            }
        }
        for (x = 0; x < (w >> 1); ++x) {
            printf("%c%c%c", fmtc(row[(x*3)]), fmtc(row[(x*3)+1]),
                fmtc(row[(x*3)+2]));
        }
    }
    free(row);
    return 0;
}
EOF

gcc "$TMPDIR/resample.c" $GCC_OPTS -o "$TMPDIR/resample" || exit 1

stream "$INFILE" - | \
    "$TMPDIR/resample" "$WIDTH" "$HEIGHT" > "$OUTFILE" || exit 1
