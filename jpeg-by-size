#!/bin/bash

INFO="
Encode a JPEG file with an exact file size limit.

Usage:
    jpeg-by-size [ -r <WxH> ] <kb> <input file> <output file.jpg>
"

RESIZE=2000x2000
if [ "x$1" = x-r ]; then
    shift
    RESIZE="$1"
    shift
fi

if [ "x$1" = x -o "x$2" = x -o "x$3" = x -o ! -f "$2" ]; then
    echo "$INFO" 1>&2
    exit 1
fi

TMPDIR=$(mktemp -d) || exit 1
trap "rm -rf $TMPDIR" EXIT

checksize() {
    # checksize <quality>
    # produces "$TMPDIR/1.jpg" from "$TMPDIR/1.ppm"
    # prints file size in bytes
    convert "$TMPDIR/1.ppm" -quality "$1" "$TMPDIR/1.jpg" || return 1
    stat -c%s "$TMPDIR/1.jpg" || return 1
    return 0
}

process_file() {
    # process_file <kb>
    # produces "$TMPDIR/2.jpg" from "$TMPDIR/1.ppm"

    local maxb=$(($1 * 1000))
    local lowq=10
    local highq=95

    local b=$(checksize $lowq) || return 1
    if [ $b -gt $maxb ]; then
        echo "Error: could not meet size constraint" 1>&2
        return 1
    fi

    cp "$TMPDIR/1.jpg" "$TMPDIR/2.jpg"
    local good=$lowq
    local bad=$(($highq + 1))

    while [ $(($good + 1)) -lt $bad ]; do
        local q=$(($(($good + $bad)) / 2))
        local b=$(checksize $scale $q) || return 1
        if [ $b -le $maxb ]; then
            good=$q
            cp "$TMPDIR/1.jpg" "$TMPDIR/2.jpg"
        else
            bad=$q
        fi
    done || return 1

    return 0
}

OUTKB="$1"
INFILE="$2"
OUTFILE="$3"

convert "$INFILE" \
    -auto-orient -strip \
    -resize "$RESIZE>" \
    -background white -flatten \
    "$TMPDIR/1.ppm" || exit 1

process_file "$OUTKB" || exit 1

cat "$TMPDIR/2.jpg" > "$OUTFILE" || exit 1

exit 0
