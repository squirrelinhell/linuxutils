#!/usr/bin/env python3

import numpy as np

def print_help():
    import sys
    sys.stdout.write("\n"
        + "Plot numerical data from a tab-separated text file.\n\n"
        + "Usage:\n\tmarginal-plot <input file>\n"
        + "\tmarginal-plot <input file> [ <column1> <column2> ]\n\n")

def auto_type(array):
    try:
        return np.asarray(array, dtype=np.int64)
    except:
        pass

    try:
        return np.asarray(array, dtype=np.float32)
    except:
        pass

    return np.asarray(array, dtype=str)

def read_file(input_file):
    args = {}
    with open(input_file, "r") as f:
        if f.buffer.read(1) == b'#':
            args["names"] = True

    data = np.genfromtxt(input_file, dtype=object, **args)

    if data.dtype.fields == None:
        if len(data.shape) <= 1:
            return {"$1": auto_type(data)}
        else:
            return {
                "$" + str(i+1): auto_type(data[:,i])
                for i in range(min(data.shape[-1], 10))
            }
    else:
        out = {}
        for i, name in enumerate(data.dtype.names):
            value = auto_type(data[name])
            out[name] = value
            if i < 10:
                out["$" + str(i+1)] = value
        return out

def running_mean(data, window):
    sums = np.cumsum(data, 0)
    return (sums[window:] - sums[:-window]) / window

def add_plot(ax, x, y, **kwargs):
    xy = np.array(list(sorted(zip(x, y))))
    color = None
    if len(xy) >= 50:
        color = ax.plot(xy[:,0], xy[:,1], ".",
            alpha=0.2, zorder=1)[0].get_color()
        xy = running_mean(xy, len(xy) // 10)
    ax.plot(xy[:,0], xy[:,1], "w-", linewidth=4, zorder=2)
    ax.plot(xy[:,0], xy[:,1], "-", color=color,
        linewidth=2, zorder=3, **kwargs)

def build_plot(input_file, *columns):
    import matplotlib.pyplot as plt

    data = read_file(input_file)

    columns = list(columns)
    if len(columns) < 1:
        columns.append("$1")

    column_values = columns
    for key in data:
        column_values = [
            v.replace(key, 'data["' + key + '"]')
            for v in column_values
        ]

    column_values = [
        np.asarray(eval('lambda data: ' + v)(data))
        for v in column_values
    ]

    if len(columns) < 2:
        columns = [""] + columns
        column_values = [np.arange(len(column_values[0]))] + column_values

    fig, ax = plt.subplots()
    ax.set_xlabel(columns[0])
    fig.tight_layout()
    ax.grid()

    add_plot(ax, column_values[0], column_values[1], label=columns[1])

    plt.legend(loc=3)

def run(*args):
    import os

    if "PLOT_FILE" in os.environ and len(os.environ["PLOT_FILE"]) >= 1:
        plot_file = os.environ["PLOT_FILE"]

        import matplotlib
        matplotlib.use('Agg')

        build_plot(*args)

        import matplotlib.pyplot as plt
        plt.gcf().set_size_inches(12, 8)
        plt.gcf().savefig(plot_file, dpi=100)
    else:
        build_plot(*args)

        import matplotlib.pyplot as plt
        plt.show()

def parse_args():
    import sys

    if len(sys.argv) >= 2:
        run(*sys.argv[1:])
    else:
        print_help()

if __name__ == "__main__":
    parse_args()
